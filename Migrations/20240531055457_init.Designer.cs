// <auto-generated />
using System;
using HotelBookingSystem.hotelContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelBookingSystem.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240531055457_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HotelBookingSystem.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isOldClient")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a209a06e-c381-4a99-aec8-9a3d08fd5100",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78b781cf-dde9-41ae-88bf-d8bdcae307f7",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEGH3QKA1+zbiFdxVlcKTx1CMBIek50sKFRRFlCjA6t+oaCbQfyqv1CCKLnDYKL5PCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c09ea47-0747-44df-b159-b8c6ec52a995",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            isOldClient = false
                        });
                });

            modelBuilder.Entity("HotelBookingSystem.Models.hotelBranch", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("branches");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "Main Branch"
                        },
                        new
                        {
                            id = 2,
                            name = "Secondary Branch"
                        });
                });

            modelBuilder.Entity("HotelBookingSystem.Models.Reservation", b =>
                {
                    b.Property<string>("clientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("roomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("checkIn")
                        .HasColumnType("datetime2");

                    b.Property<int>("adultsNum")
                        .HasColumnType("int");

                    b.Property<int>("branchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("checkout")
                        .HasColumnType("datetime2");

                    b.Property<int>("childrenNum")
                        .HasColumnType("int");

                    b.Property<decimal>("cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("clientId", "roomId", "checkIn");

                    b.HasIndex("branchId");

                    b.HasIndex("roomId");

                    b.ToTable("reservations");

                    b.HasData(
                        new
                        {
                            clientId = "a209a06e-c381-4a99-aec8-9a3d08fd5100",
                            roomId = 1,
                            checkIn = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            adultsNum = 1,
                            branchId = 1,
                            checkout = new DateTime(2024, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            childrenNum = 1,
                            cost = 1000m,
                            name = "admin",
                            nationalId = "464684",
                            phoneNumber = "011155945"
                        },
                        new
                        {
                            clientId = "a209a06e-c381-4a99-aec8-9a3d08fd5100",
                            roomId = 2,
                            checkIn = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            adultsNum = 2,
                            branchId = 2,
                            checkout = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            childrenNum = 2,
                            cost = 2000m,
                            name = "admin",
                            nationalId = "4964684",
                            phoneNumber = "01561155945"
                        },
                        new
                        {
                            clientId = "a209a06e-c381-4a99-aec8-9a3d08fd5100",
                            roomId = 3,
                            checkIn = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            adultsNum = 4,
                            branchId = 1,
                            checkout = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            childrenNum = 4,
                            cost = 4000m,
                            name = "admin",
                            nationalId = "464684",
                            phoneNumber = "011155945"
                        });
                });

            modelBuilder.Entity("HotelBookingSystem.Models.Room", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("hotelId")
                        .HasColumnType("int");

                    b.Property<decimal>("pricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("hotelId");

                    b.ToTable("rooms");

                    b.HasData(
                        new
                        {
                            id = 1,
                            hotelId = 1,
                            pricePerDay = 1000m,
                            type = 1000
                        },
                        new
                        {
                            id = 2,
                            hotelId = 1,
                            pricePerDay = 2000m,
                            type = 2000
                        },
                        new
                        {
                            id = 3,
                            hotelId = 1,
                            pricePerDay = 4000m,
                            type = 4000
                        },
                        new
                        {
                            id = 4,
                            hotelId = 2,
                            pricePerDay = 1000m,
                            type = 1000
                        },
                        new
                        {
                            id = 5,
                            hotelId = 2,
                            pricePerDay = 2000m,
                            type = 2000
                        },
                        new
                        {
                            id = 6,
                            hotelId = 1,
                            pricePerDay = 1000m,
                            type = 1000
                        },
                        new
                        {
                            id = 7,
                            hotelId = 2,
                            pricePerDay = 4000m,
                            type = 2000
                        },
                        new
                        {
                            id = 8,
                            hotelId = 2,
                            pricePerDay = 4000m,
                            type = 4000
                        },
                        new
                        {
                            id = 9,
                            hotelId = 1,
                            pricePerDay = 4000m,
                            type = 4000
                        },
                        new
                        {
                            id = 10,
                            hotelId = 1,
                            pricePerDay = 4000m,
                            type = 4000
                        },
                        new
                        {
                            id = 11,
                            hotelId = 1,
                            pricePerDay = 2000m,
                            type = 2000
                        },
                        new
                        {
                            id = 12,
                            hotelId = 1,
                            pricePerDay = 1000m,
                            type = 1000
                        },
                        new
                        {
                            id = 13,
                            hotelId = 2,
                            pricePerDay = 2000m,
                            type = 2000
                        },
                        new
                        {
                            id = 14,
                            hotelId = 2,
                            pricePerDay = 2000m,
                            type = 2000
                        },
                        new
                        {
                            id = 15,
                            hotelId = 2,
                            pricePerDay = 1000m,
                            type = 1000
                        },
                        new
                        {
                            id = 16,
                            hotelId = 2,
                            pricePerDay = 1000m,
                            type = 1000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "d7130f6b-7632-466e-bdc7-cb19fe2a211c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "b88e817b-8cee-4eb4-a712-2f5a91d7c9ad",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a209a06e-c381-4a99-aec8-9a3d08fd5100",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HotelBookingSystem.Models.Reservation", b =>
                {
                    b.HasOne("HotelBookingSystem.Models.hotelBranch", "hotelBranch")
                        .WithMany("reservations")
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingSystem.Models.ApplicationUser", "client")
                        .WithMany("reservations")
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingSystem.Models.Room", "room")
                        .WithMany("reservations")
                        .HasForeignKey("roomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");

                    b.Navigation("hotelBranch");

                    b.Navigation("room");
                });

            modelBuilder.Entity("HotelBookingSystem.Models.Room", b =>
                {
                    b.HasOne("HotelBookingSystem.Models.hotelBranch", "hotelBranch")
                        .WithMany()
                        .HasForeignKey("hotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hotelBranch");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HotelBookingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HotelBookingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelBookingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HotelBookingSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelBookingSystem.Models.ApplicationUser", b =>
                {
                    b.Navigation("reservations");
                });

            modelBuilder.Entity("HotelBookingSystem.Models.hotelBranch", b =>
                {
                    b.Navigation("reservations");
                });

            modelBuilder.Entity("HotelBookingSystem.Models.Room", b =>
                {
                    b.Navigation("reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
